Given an integer array nums, find a 
subarray
 that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        if (nums.empty()) return 0;

        int64_t maxProduct = nums[0];
        int64_t minProduct = nums[0];
        int64_t globalMaxProduct = nums[0];

        for (size_t i = 1; i < nums.size(); ++i) {
            if (nums[i] < 0) {
                // Swap maxProduct and minProduct when the current number is negative
                swap(maxProduct, minProduct);
            }

            // Update maxProduct and minProduct
            maxProduct = max(static_cast<int64_t>(nums[i]), nums[i] * maxProduct);
            minProduct = min(static_cast<int64_t>(nums[i]), nums[i] * minProduct);

            // Update global maximum product
            globalMaxProduct = max(globalMaxProduct, maxProduct);
        }

        return globalMaxProduct;
    }
};

// Example usage
int main() {
    Solution sol;
    vector<int> nums = {2, 3, -2, 4, -1}; // Example input
    cout << "Maximum product of a subarray: " << sol.maxProduct(nums) << endl;
    return 0;
}

Time Complexity: 
𝑂
(
𝑛
)
O(n) – Each element is processed once.

Space Complexity: 
𝑂
(
1
)
O(1) – Constant space for variables.
