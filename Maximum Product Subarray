Given an integer array nums, find a 
subarray
 that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.



class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int64_t maxProduct = 0;
        int64_t leftprod = 1;
        int64_t rightprod = 1;
        int n = nums.size();
        for (int i =0; i<n; i++) {
            leftprod = leftprod == 0 ? 1 : leftprod;
            rightprod = rightprod == 0 ? 1 : rightprod;

            leftprod *= nums[i];

            rightprod *= nums[n - 1 - i];
            maxProduct = max(maxProduct, max(leftprod, rightprod));
        }

        if (n==1)
            maxProduct = nums[0];

        return maxProduct;

    }
};



Below function should help in putting a restriction to limits 
bool willMultiplyOverflow(int a, int b) {
    if (a > 0 && b > 0 && a > (std::numeric_limits<int>::max() / b)) return true;
    if (a > 0 && b < 0 && b < (std::numeric_limits<int>::min() / a)) return true;
    if (a < 0 && b > 0 && a < (std::numeric_limits<int>::min() / b)) return true;
    if (a < 0 && b < 0 && a < (std::numeric_limits<int>::max() / b)) return true;
    return false;
}
