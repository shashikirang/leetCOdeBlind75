You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

#include <bits/stdc++.h>
using namespace std;
int main()
{
    int n = 0;
    cout << "Enter size :" << endl;
    cin >> n; 
    
    vector<int> dp(n+1, -1); 
    
    int i  =0;
    dp[i] = 1;
    dp[i+1] = 1;
    
    for ( i = 2; i<=n; i++) {
        dp[i] = dp[i-1] +dp[i-2];
    }
    
    cout << dp[n];


    return 0;
}


//Time complexity = O(n)
//Space complexity = O(n)

----------------------------------------------------
#include <bits/stdc++.h>

using namespace std;


int main() {

  int n=3;
  
  int prev2 = 1;
  int prev = 1;
  
  for(int i=2; i<=n; i++){
      int cur_i = prev2+ prev;
      prev2 = prev;
      prev= cur_i;
  }
  cout<<prev;
  return 0;
}

//Time Complexity = O(N)
//Space complexity = O(1)
