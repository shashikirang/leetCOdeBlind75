Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

func lengthOfLongestSubstring(s string) int {

    var charmap map[rune]int
    charmap = make(map[rune]int)

    str := []rune(s)
    l := 0
    maxlength := 0

    for r, cur := range str {

        if _, ok := charmap[cur]; ok && charmap[cur] >= l {
            l = charmap[cur] +1
        }

        charmap[cur] = r
        maxlength = max(maxlength, r - l + 1)
    } 
    
    return maxlength
}
============================================================================================================

#include <iostream>
#include <unordered_set>
#include <string>

class Solution {
public:
    int lengthOfLongestSubstring(std::string s) {
        std::unordered_set<char> char_set;
        int left = 0;
        int max_length = 0;
        
        for (int right = 0; right < s.length(); ++right) {
            while (char_set.find(s[right]) != char_set.end()) {
                char_set.erase(s[left]);
                ++left;
            }
            char_set.insert(s[right]);
            max_length = std::max(max_length, right - left + 1);
        }
        
        return max_length;
    }
};

// Example usage:
int main() {
    Solution solution;
    std::string s = "abcabcbb";
    std::cout << solution.lengthOfLongestSubstring(s) << std::endl;  // Output: 3
    return 0;
}
