You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 

Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1
Example 2:

Input: coins = [2], amount = 3
Output: -1
Example 3:

Input: coins = [1], amount = 0
Output: 0
 

Constraints:

1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104


class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        
        //Edge case 
        if (amount < 1)
            return 0;

        //Create dp array 
        //int minCoinsDP[] = new int[amount+1];
        int minCoinsDP[amount+1];
        minCoinsDP[0] = 0;

        for (int i =1; i<=amount; i++) {
            minCoinsDP[i] = 9999999;

            //try from each coin position 
            for(int coin: coins)  {
                cout << "coin : " << coin << " i " << i << endl;
                if ( coin <=i && minCoinsDP[i-coin] != 9999999) {
                    minCoinsDP[i] = min(minCoinsDP[i], 1+ minCoinsDP[i-coin]); 
                }
            }
        }

        for ( auto i : minCoinsDP) {
            cout << " " << i << "-" << endl;
        }
        
        if(minCoinsDP[amount] == 9999999)
            return -1;
        

        return minCoinsDP[amount];


    }
};

=======================================================================
#include <vector>
#include <algorithm>
using namespace std;

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        // Initialize the dp array with a value greater than any possible number of coins
        vector<int> dp(amount + 1, amount + 1);
        dp[0] = 0;  // Base case
        
        // Compute the minimum number of coins for each amount from 1 to amount
        for (int i = 1; i <= amount; ++i) {
            for (int coin : coins) {
                if (i - coin >= 0) {
                    dp[i] = min(dp[i], dp[i - coin] + 1);
                }
            }
        }
        
        // If dp[amount] is still amount + 1, it means no solution was found
        return dp[amount] > amount ? -1 : dp[amount];
    }
};


Time complexity : 
O ( m x n ) // m coins, n is the target 
SPace complexity : 
O ( n ) // array to memoize 
