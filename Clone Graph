Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a value (int) and a list (List[Node]) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
 

Test case format:

For simplicity, each node's value is the same as the node's index (1-indexed). For example, the first node with val == 1, the second node with val == 2, and so on. The graph is represented in the test case using an adjacency list.

An adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.
Input: adjList = [[]]
Output: [[]]
Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.
Example 3:

Input: adjList = []
Output: []
Explanation: This an empty graph, it does not have any nodes.
 

Constraints:

The number of nodes in the graph is in the range [0, 100].
1 <= Node.val <= 100
Node.val is unique for each node.
There are no repeated edges and no self-loops in the graph.
The Graph is connected and all nodes can be visited starting from the given node.

/**
 * Definition for a Node.
 * type Node struct {
 *     Val int
 *     Neighbors []*Node
 * }
 */

func cloneGraph(node *Node) *Node {
    
    if node == nil {
        return nil
    }

    visited := make(map[*Node]*Node)
    return clone(node, visited)
}

func clone(node *Node, visited map[*Node]*Node) *Node {

    if node, ok := visited[node]; ok {
        return node
    }

    cloneNode := &Node{Val : node.Val}
    visited[node] = cloneNode
    for _, neighbor := range node.Neighbors {
        cloneNode.Neighbors = append(cloneNode.Neighbors, clone(neighbor, visited))
    }

    return cloneNode
}



C++ - DFS solution :
======================================
#include <unordered_map>
#include <vector>
using namespace std;

// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};

class Solution {
public:
    unordered_map<Node*, Node*> visited;
    
    Node* cloneGraph(Node* node) {
        if (!node) return nullptr;
        
        // If the node has already been visited, return the cloned node.
        if (visited.find(node) != visited.end()) {
            return visited[node];
        }
        
        // Clone the node
        Node* clone = new Node(node->val);
        visited[node] = clone;
        
        // Iterate through the neighbors to clone them recursively
        for (auto neighbor : node->neighbors) {
            clone->neighbors.push_back(cloneGraph(neighbor));
        }
        
        return clone;
    }
};


Time Complexity: 
O(V+E), where 
V is the number of nodes and 
E is the number of edges.
We visit each node and edge exactly once.
Space Complexity: 
O(V), where V is the number of nodes. This is due to the space used by the recursion stack and the visited map.



BFS Approach
============================================================
#include <unordered_map>
#include <queue>
#include <vector>
using namespace std;

// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if (!node) return nullptr;
        
        // Map to track visited nodes and their clones
        unordered_map<Node*, Node*> visited;
        
        // Create a queue for BFS
        queue<Node*> q;
        q.push(node);
        
        // Clone the root node and store it in the visited map
        Node* clone = new Node(node->val);
        visited[node] = clone;
        
        // Perform BFS
        while (!q.empty()) {
            Node* current = q.front();
            q.pop();
            
            // Iterate through the neighbors of the current node
            for (auto neighbor : current->neighbors) {
                if (visited.find(neighbor) == visited.end()) {
                    // If this neighbor hasn't been visited, clone and add to the queue
                    Node* neighborClone = new Node(neighbor->val);
                    visited[neighbor] = neighborClone;
                    q.push(neighbor);
                }
                // Add the cloned neighbor to the current node's clone's neighbors
                visited[current]->neighbors.push_back(visited[neighbor]);
            }
        }
        
        // Return the clone of the original starting node
        return clone;
    }
};
