The "Rain Water Trapping" problem is a classic interview question that tests your understanding of arrays and algorithms. The problem is as follows:

Problem Statement:

You are given an array of non-negative integers representing the height of bars in a histogram where each bar has a width of 1. Compute how much water can be trapped between the bars after raining.

Example:

For the input array height = [0,1,0,2,1,0,1,3,2,1,2,1], the trapped water is 6 units.

#include <vector>
#include <algorithm>
#include <iostream>

int trap(const std::vector<int>& height) {
    int n = height.size();
    if (n == 0) return 0;

    int left = 0, right = n - 1;
    int left_max = 0, right_max = 0;
    int water_trapped = 0;

    while (left <= right) {
        if (height[left] <= height[right]) {
            if (height[left] >= left_max) {
                left_max = height[left];
            } else {
                water_trapped += left_max - height[left];
            }
            ++left;
        } else {
            if (height[right] >= right_max) {
                right_max = height[right];
            } else {
                water_trapped += right_max - height[right];
            }
            --right;
        }
    }

    return water_trapped;
}

int main() {
    std::vector<int> height = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
    std::cout << "Trapped water (Two-Pointer): " << trap(height) << std::endl;
    return 0;
}
