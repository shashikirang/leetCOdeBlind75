Given a string s, return the longest 
palindromic
 
substring
 in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.


#include <iostream>
#include <string>

// Function to expand around the center and find the longest palindromic substring
std::pair<int, int> expandAroundCenter(const std::string &s, int left, int right) {
    while (left >= 0 && right < s.length() && s[left] == s[right]) {
        left--;
        right++;
    }
    return {left + 1, right};
}

// Function to find the longest palindromic substring
std::string longestPalindrome(const std::string &s) {
    if (s.length() < 2) {
        return s;
    }

    int start = 0, end = 0;

    for (int i = 0; i < s.length(); ++i) {
        // Check for odd length palindromes
        auto [l1, r1] = expandAroundCenter(s, i, i);
        // Check for even length palindromes
        auto [l2, r2] = expandAroundCenter(s, i, i + 1);

        if (r1 - l1 > end - start) {
            start = l1;
            end = r1;
        }
        if (r2 - l2 > end - start) {
            start = l2;
            end = r2;
        }
    }

    return s.substr(start, end - start);
}

int main() {
    std::string s1 = "babad";
    std::string s2 = "cbbd";

    std::cout << "Longest palindromic substring of " << s1 << " is " << longestPalindrome(s1) << std::endl;
    std::cout << "Longest palindromic substring of " << s2 << " is " << longestPalindrome(s2) << std::endl;

    return 0;
}
======================================================================================================================
#include <iostream>
#include <string>
using namespace std;

// Helper function to expand around the center
string expandAroundCenter(const string& s, int left, int right) {
    while (left >= 0 && right < s.size() && s[left] == s[right]) {
        --left;
        ++right;
    }
    return s.substr(left + 1, right - left - 1);
}

// Function to find the longest palindromic substring
string longestPalindrome(const string& s) {
    if (s.empty()) return "";

    string longest;
    for (int i = 0; i < s.size(); ++i) {
        // Odd length palindromes
        string oddPalindrome = expandAroundCenter(s, i, i);
        if (oddPalindrome.size() > longest.size()) {
            longest = oddPalindrome;
        }
        
        // Even length palindromes
        string evenPalindrome = expandAroundCenter(s, i, i + 1);
        if (evenPalindrome.size() > longest.size()) {
            longest = evenPalindrome;
        }
    }

    return longest;
}

int main() {
    string s = "babad";
    string result = longestPalindrome(s);
    cout << "Longest palindromic substring: " << result << endl;
    return 0;
}


=======================================================================================================================
package main

import (
	"fmt"
)

// expandAroundCenter expands around the given center and returns the start and end indices of the palindrome
func expandAroundCenter(s string, left int, right int) (int, int) {
	for left >= 0 && right < len(s) && s[left] == s[right] {
		left--
		right++
	}
	return left + 1, right
}

// longestPalindrome finds the longest palindromic substring in the given string
func longestPalindrome(s string) string {
	if len(s) < 2 {
		return s
	}

	start, end := 0, 0

	for i := 0; i < len(s); i++ {
		// Odd length palindromes
		l1, r1 := expandAroundCenter(s, i, i)
		// Even length palindromes
		l2, r2 := expandAroundCenter(s, i, i+1)

		if r1-l1 > end-start {
			start, end = l1, r1
		}
		if r2-l2 > end-start {
			start, end = l2, r2
		}
	}

	return s[start:end]
}

func main() {
	s1 := "babad"
	s2 := "cbbd"

	fmt.Printf("Longest palindromic substring of %s is %s\n", s1, longestPalindrome(s1))
	fmt.Printf("Longest palindromic substring of %s is %s\n", s2, longestPalindrome(s2))
}
