Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

---------------------------------------=================================-----------------------------------------
#include <iostream>
#include <limits>

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

bool validate(TreeNode* node, long long low, long long high) {
    // An empty tree is a valid BST
    if (node == NULL) return true;

    // The current node's value must be within the range defined by low and high
    if (node->val <= low || node->val >= high) return false;

    // Recursively validate the left and right subtrees
    return validate(node->left, low, node->val) && validate(node->right, node->val, high);
}

bool isValidBST(TreeNode* root) {
    return validate(root, std::numeric_limits<long long>::min(), std::numeric_limits<long long>::max());
}

int main() {
    // Example usage:
    TreeNode* root = new TreeNode(2);
    root->left = new TreeNode(1);
    root->right = new TreeNode(3);

    if (isValidBST(root)) {
        std::cout << "The tree is a valid BST." << std::endl;
    } else {
        std::cout << "The tree is not a valid BST." << std::endl;
    }

    // Clean up memory
    delete root->left;
    delete root->right;
    delete root;

    return 0;
}
