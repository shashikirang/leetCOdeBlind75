Given an integer array nums, find the 
subarray
 with the largest sum, and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.
Example 2:

Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
class Solution {
public: 
int maxCrossingSum(const std::vector<int>& nums, int left, int mid, int right) {
    // Include elements on the left of mid.
    int sum = 0;
    int left_sum = INT_MIN;
    for (int i = mid; i >= left; --i) {
        sum += nums[i];
        if (sum > left_sum) {
            left_sum = sum;
        }
    }

    // Include elements on the right of mid.
    sum = 0;
    int right_sum = INT_MIN;
    for (int i = mid + 1; i <= right; ++i) {
        sum += nums[i];
        if (sum > right_sum) {
            right_sum = sum;
        }
    }

    // Return sum of elements on the left and right of mid.
    return left_sum + right_sum;
}
};

//O(n) solution
class Solution {
public:
  int maxSubArray(const std::vector<int>& nums) {
    int max_current = nums[0];
    int max_global = nums[0];

    for (size_t i = 1; i < nums.size(); ++i) {
        max_current = std::max(nums[i], max_current + nums[i]);
        if (max_current > max_global) {
            max_global = max_current;
        }
    }

    return max_global;
}
};

//Divide and conquer solution 
