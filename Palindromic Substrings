Given a string s, return the number of palindromic substrings in it.

A string is a palindrome when it reads the same backward as forward.

A substring is a contiguous sequence of characters within the string.

 

Example 1:

Input: s = "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".
Example 2:

Input: s = "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
 

Constraints:

1 <= s.length <= 1000
s consists of lowercase English letters.




#include <iostream>
#include <string>

// Function to expand around the center and count palindromic substrings
int expandAroundCenter(const std::string &s, int left, int right) {
    int count = 0;
    while (left >= 0 && right < s.length() && s[left] == s[right]) {
        left--;
        right++;
        count++;
    }
    return count;
}

// Function to count palindromic substrings
int countSubstrings(const std::string &s) {
    int count = 0;
    for (int i = 0; i < s.length(); ++i) {
        // Count odd length palindromes
        count += expandAroundCenter(s, i, i);
        // Count even length palindromes
        count += expandAroundCenter(s, i, i + 1);
    }
    return count;
}

int main() {
    std::string s1 = "aaa";
    std::string s2 = "abc";

    std::cout << "Number of palindromic substrings in \"" << s1 << "\" is " << countSubstrings(s1) << std::endl;
    std::cout << "Number of palindromic substrings in \"" << s2 << "\" is " << countSubstrings(s2) << std::endl;

    return 0;
}
