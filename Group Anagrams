Given an array of strings strs, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 2:

Input: strs = [""]
Output: [[""]]
Example 3:

Input: strs = ["a"]
Output: [["a"]]


class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
       std::unordered_map<std::string, std::vector<std::string>> anagrams;

    for (const std::string& str : strs) {
        // Create a key by sorting the characters in the string
        std::string sortedStr = str;
        std::sort(sortedStr.begin(), sortedStr.end());

        // Add the original string to the corresponding group in the hashmap
        anagrams[sortedStr].push_back(str);
    }

    // Prepare the result from the hashmap values
    std::vector<std::vector<std::string>> result;
    for (const auto& pair : anagrams) {
        result.push_back(pair.second);
    }

    return result; 
    }
};
